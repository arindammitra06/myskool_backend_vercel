// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  admin
  student
  staff
  parent
  accountant
}

enum Gender {
  Male
  Female
  Others
}

enum MaritalStatus {
  NA_MARITALSTATUS
  Single
  Married
  Others
}

enum SalaryType {
  NA_SALTYPE
  FullTime
  PerTime
  PerHour
  PerLecture
}

enum ParentType {
  NA_PARENTTYPE
  Father
  Mother
  GrandFather
  GrandMother
  LegalGuardian
}

enum SubjectType {
  Theory
  Practical
  Assessment
  Others
}

model Sessions {
  id        Int         @id @default(autoincrement())
  session   String      @db.VarChar(255)
  Institute Institute[]
}

model Institute {
  id                 Int       @id @default(autoincrement())
  instituteName      String    @db.VarChar(255)
  instituteSignature String    @db.VarChar(255)
  instituteCode      String?   @db.VarChar(255)
  address            String    @db.VarChar(255)
  phone              String    @db.VarChar(255)
  email              String    @db.VarChar(255)
  currency           String    @db.VarChar(255)
  sessionId          Int?
  session            Sessions? @relation(fields: [sessionId], references: [id])
  sessionStartMonth  String?   @db.VarChar(255)
  feeDuesDays        Int?
  allowOnlineClass   Int       @default(0)
  jitsiAppID         String?   @db.VarChar(255)
  themeColor         String?   @db.VarChar(255)
  logo               String    @db.VarChar(255)
  headerImage        String    @db.VarChar(255)
  created_by         Int
  updated_by         Int
  created_at         DateTime  @default(now()) @db.DateTime(6)
  updated_at         DateTime  @default(now()) @db.DateTime(6)
  Campus             Campus[]
}

model Campus {
  id                      Int                       @id @default(autoincrement())
  campusName              String                    @db.VarChar(255)
  campusAddress           String                    @db.VarChar(255)
  campusPhone             String                    @db.VarChar(255)
  active                  Int                       @default(1) @db.TinyInt
  instituteId             Int
  institute               Institute                 @relation(fields: [instituteId], references: [id])
  created_by              Int
  updated_by              Int
  created_at              DateTime                  @default(now()) @db.DateTime(6)
  updated_at              DateTime                  @default(now()) @db.DateTime(6)
  TransportRoutes         TransportRoutes[]
  Class                   Class[]
  Section                 Section[]
  User                    User[]
  AdmissionRecord         AdmissionRecord[]
  MonthlyFee              MonthlyFee[]
  DefaultImageSetting     DefaultImageSetting[]
  OnlineClasses           OnlineClasses[]
  Subject                 Subject[]
  ListOfValues            ListOfValues[]
  UserPermission          UserPermission[]
  Permission              Permission[]
  MenuCategoryPermissions MenuCategoryPermissions[]
  MenuItemPermissions     MenuItemPermissions[]
  TimeTable               TimeTable[]
}

model DefaultImageSetting {
  id         Int      @id @default(autoincrement())
  campusId   Int
  campus     Campus   @relation(fields: [campusId], references: [id])
  front      String?  @db.VarChar(255)
  back       String?  @db.VarChar(255)
  type       String?  @db.VarChar(255)
  forUser    String?  @db.VarChar(255)
  created_by Int
  updated_by Int
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @db.DateTime(6)
}

model TransportRoutes {
  id           Int      @id @default(autoincrement())
  routeName    String   @db.VarChar(255)
  routeDesc    String   @db.VarChar(255)
  startAddress String   @db.VarChar(255)
  endAddress   String   @db.VarChar(255)
  active       Int      @default(1) @db.TinyInt
  campusId     Int
  campus       Campus   @relation(fields: [campusId], references: [id])
  created_by   Int
  updated_by   Int
  created_at   DateTime @default(now()) @db.DateTime(6)
  updated_at   DateTime @default(now()) @db.DateTime(6)

  User User[]
}

model Class {
  id            Int             @id @default(autoincrement())
  className     String          @db.VarChar(255)
  numericName   String          @db.VarChar(255)
  teacherId     Int?
  campusId      Int
  campus        Campus          @relation(fields: [campusId], references: [id])
  active        Int             @default(1) @db.TinyInt
  created_by    Int
  updated_by    Int
  created_at    DateTime        @default(now()) @db.DateTime(6)
  updated_at    DateTime        @default(now()) @db.DateTime(6)
  Section       Section[]
  User          User[]
  OnlineClasses OnlineClasses[]
  TimeTable     TimeTable[]
}

model Section {
  id            Int             @id @default(autoincrement())
  sectionName   String          @db.VarChar(255)
  classId       Int
  class         Class           @relation(fields: [classId], references: [id])
  teacherId     Int?
  campusId      Int
  campus        Campus          @relation(fields: [campusId], references: [id])
  active        Int             @default(1) @db.TinyInt
  created_by    Int
  updated_by    Int
  created_at    DateTime        @default(now()) @db.DateTime(6)
  updated_at    DateTime        @default(now()) @db.DateTime(6)
  User          User[]
  OnlineClasses OnlineClasses[]
  subjects      Subject[]
  TimeTable     TimeTable[]
}

model User {
  id                 Int               @id @default(autoincrement())
  userType           UserType          @default(student)
  firstName          String            @db.VarChar(255)
  middleName         String?           @db.VarChar(255)
  lastName           String            @db.VarChar(255)
  displayName        String            @db.VarChar(255)
  gender             Gender            @default(Male)
  dateOfBirth        String?           @db.VarChar(255)
  placeOfBirth       String?           @db.VarChar(255)
  photo              String?           @db.VarChar(255)
  thumbnailUrl       String?           @db.VarChar(255)
  active             Int               @default(1) @db.TinyInt
  campusId           Int
  campus             Campus?           @relation(fields: [campusId], references: [id])
  homeAddress        String?           @db.VarChar(500)
  password           String            @db.VarChar(255)
  idCardNumber       String            @unique @db.VarChar(255)
  rollNumber         Int?
  classId            Int?
  class              Class?            @relation(fields: [classId], references: [id])
  sectionId          Int?
  section            Section?          @relation(fields: [sectionId], references: [id])
  routeId            Int?
  route              TransportRoutes?  @relation(fields: [routeId], references: [id])
  previousSchool     String?           @db.VarChar(255)
  admissionDate      String?           @db.VarChar(255)
  email              String?           @db.VarChar(255)
  mobile             String?           @db.VarChar(255)
  whatsapp           String?           @db.VarChar(255)
  empId              String?           @db.VarChar(255)
  designation        String?           @db.VarChar(255)
  CNIC               String?           @db.VarChar(255)
  qualification      String?           @db.VarChar(255)
  fatherHusbandName  String?           @db.VarChar(255)
  joiningDate        String?           @db.VarChar(255)
  maritalStatus      MaritalStatus?    @default(NA_MARITALSTATUS)
  salaryType         SalaryType?       @default(NA_SALTYPE)
  schoolIdCardNumber String?           @db.VarChar(255)
  idProofPhoto       String?           @db.VarChar(255)
  religion           String?           @db.VarChar(255)
  citizenship        String?           @db.VarChar(255)
  parentType         ParentType?       @default(NA_PARENTTYPE)
  profession         String?           @db.VarChar(255)
  theme              String?           @db.VarChar(255)
  colorName          String?           @db.VarChar(255)
  created_by         Int
  updated_by         Int
  created_at         DateTime          @default(now()) @db.DateTime(6)
  updated_at         DateTime          @default(now()) @db.DateTime(6)
  userPermissions    UserPermission[]
  AdmissionRecord    AdmissionRecord[]
  childId            Int?
  child              User?             @relation("ParentChildRelation", fields: [childId], references: [id])
  parents            User[]            @relation("ParentChildRelation")
  parentsNames       String?           @db.VarChar(255)
  MonthlyFee         MonthlyFee[]
  OnlineClasses      OnlineClasses?    @relation(fields: [onlineClassesId], references: [id])
  onlineClassesId    Int?
  subjects           Subject[]
}

model AdmissionRecord {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  campusId          Int
  campus            Campus   @relation(fields: [campusId], references: [id])
  admissionComments String?  @db.VarChar(255)
  rollNumber        String?  @db.VarChar(255)
  active            Int      @default(1) @db.TinyInt
  created_by        Int
  updated_by        Int
  created_at        DateTime @default(now()) @db.DateTime(6)
  updated_at        DateTime @default(now()) @db.DateTime(6)
}

model MonthlyFee {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  campusId Int
  campus   Campus @relation(fields: [campusId], references: [id])

  monthlyamount  Int
  hasDiscount    Int      @default(0) @db.TinyInt
  discountAmount Int
  totalamount    Int
  active         Int      @default(1) @db.TinyInt
  created_by     Int
  updated_by     Int
  created_at     DateTime @default(now()) @db.DateTime(6)
  updated_at     DateTime @default(now()) @db.DateTime(6)
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  active       Int        @default(1) @db.TinyInt
  campusId     Int?
  campus       Campus?    @relation(fields: [campusId], references: [id])
  created_by   Int
  updated_by   Int
  created_at   DateTime   @default(now()) @db.DateTime(6)
  updated_at   DateTime   @default(now()) @db.DateTime(6)

  User User @relation(fields: [userId], references: [id])
}

model Permission {
  id                      Int                       @id @default(autoincrement())
  permissionName          String                    @db.VarChar(255)
  permissionType          UserType                  @default(student)
  isReadonly              Int                       @default(1) @db.TinyInt
  isMobile                Int                       @default(1) @db.TinyInt
  active                  Int                       @default(1) @db.TinyInt
  campusId                Int?
  campus                  Campus?                   @relation(fields: [campusId], references: [id])
  created_by              Int
  updated_by              Int
  created_at              DateTime                  @default(now()) @db.DateTime(6)
  updated_at              DateTime                  @default(now()) @db.DateTime(6)
  UserPermission          UserPermission[]
  MenuCategoryPermissions MenuCategoryPermissions[]
  MenuItemPermissions     MenuItemPermissions[]
}

model MenuCategoryPermissions {
  id             Int          @id @default(autoincrement())
  permissionId   Int
  permission     Permission   @relation(fields: [permissionId], references: [id])
  menuCategoryId Int
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  campusId       Int?
  campus         Campus?      @relation(fields: [campusId], references: [id])

  active     Int      @default(1) @db.TinyInt
  created_by Int
  updated_by Int
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @db.DateTime(6)
}

model MenuCategory {
  id                      Int                       @id
  label                   String                    @db.VarChar(255)
  route                   String?                   @db.VarChar(255)
  orderKey                Int
  active                  Int                       @default(1) @db.TinyInt
  created_by              Int
  updated_by              Int
  created_at              DateTime                  @default(now()) @db.DateTime(6)
  updated_at              DateTime                  @default(now()) @db.DateTime(6)
  menu_item               MenuItems[]
  MenuCategoryPermissions MenuCategoryPermissions[]
}

model MenuItemPermissions {
  id           Int        @id @default(autoincrement())
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  menuItemId   Int
  menuItem     MenuItems  @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  campusId     Int?
  campus       Campus?    @relation(fields: [campusId], references: [id])
  active       Int        @default(1) @db.TinyInt
  created_by   Int
  updated_by   Int
  created_at   DateTime   @default(now()) @db.DateTime(6)
  updated_at   DateTime   @default(now()) @db.DateTime(6)
}

model MenuItems {
  id                  Int                   @id
  label               String                @db.VarChar(255)
  route               String                @db.VarChar(255)
  orderKey            Int
  active              Int                   @default(1) @db.TinyInt
  created_by          Int
  updated_by          Int
  created_at          DateTime              @default(now()) @db.DateTime(6)
  updated_at          DateTime              @default(now()) @db.DateTime(6)
  category            MenuCategory          @relation(fields: [categoryId], references: [id])
  categoryId          Int
  MenuItemPermissions MenuItemPermissions[]
}

model OnlineClasses {
  id              Int      @id @default(autoincrement())
  classTopic      String   @db.VarChar(255)
  classId         Int
  class           Class    @relation(fields: [classId], references: [id])
  sectionId       Int
  section         Section  @relation(fields: [sectionId], references: [id])
  meetingDateTime String?  @db.VarChar(255)
  meetingRoomId   String?  @db.VarChar(255)
  campusId        Int
  campus          Campus   @relation(fields: [campusId], references: [id])
  isPast          Int      @default(1) @db.TinyInt
  active          Int      @default(1) @db.TinyInt
  created_by      Int
  updated_by      Int
  created_at      DateTime @default(now()) @db.DateTime(6)
  updated_at      DateTime @default(now()) @db.DateTime(6)
  User            User[]
}

model Subject {
  id          Int          @id @default(autoincrement())
  campusId    Int
  campus      Campus       @relation(fields: [campusId], references: [id])
  active      Int          @default(1) @db.TinyInt
  subjectName String?      @db.VarChar(255)
  subjectCode String?      @db.VarChar(255)
  subjectType SubjectType? @default(Theory)
  created_by  Int
  updated_by  Int
  created_at  DateTime     @default(now()) @db.DateTime(6)
  updated_at  DateTime     @default(now()) @db.DateTime(6)
  teachers    User[]
  sections    Section[]
  sectionId   Int?
  TimeTable   TimeTable[]
}

model ListOfValues {
  id         Int      @id @default(autoincrement())
  groupName  String   @db.VarChar(255)
  uniqueKey  String   @unique @db.VarChar(255)
  shortName  String   @db.VarChar(255)
  longName   String   @db.VarChar(255)
  desc       String   @db.VarChar(255)
  campusId   Int
  campus     Campus   @relation(fields: [campusId], references: [id])
  active     Int      @default(1) @db.TinyInt
  created_by Int
  updated_by Int
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @db.DateTime(6)
}

model TimeTable {
  id         Int      @id @default(autoincrement())
  classId    Int
  class      Class    @relation(fields: [classId], references: [id])
  sectionId  Int
  section    Section  @relation(fields: [sectionId], references: [id])
  campusId   Int
  campus     Campus   @relation(fields: [campusId], references: [id])
  subject    String?   
  color      String   @default("#A5DD9B")
  active     Int      @default(1) @db.TinyInt
  day        String
  startTime  String
  endTime    String
  created_by Int
  updated_by Int
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @db.DateTime(6)
  Subject    Subject? @relation(fields: [subjectId], references: [id])
  subjectId  Int?
}
