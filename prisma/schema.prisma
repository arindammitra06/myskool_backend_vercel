// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  admin
  student
  staff
  parent
  accountant
}

enum Gender {
  Male
  Female
  Others
}

enum MaritalStatus {
  NA_MARITALSTATUS
  Single
  Married
  Others
}

enum SalaryType {
  NA_SALTYPE
  FullTime
  PerTime
  PerHour
  PerLecture
}

enum ParentType {
  NA_PARENTTYPE
  Aunt
  BrotherInLaw
  Cousin
  Daughter
  DaughterInLaw
  Father
  FatherInLaw
  GrandFather
  GrandMother
  Husband
  LegalGuardian
  Mother
  MotherInLaw
  Nephew
  Sister
  SisterInLaw
  Son
  SonInLaw
  Uncle
  Wife
}

enum SubjectType {
  Theory
  Practical
  Assessment
  Others
}

enum AbsenseStatus {
  UnMarked
  Present
  Absent
  Holiday
  Leave
}

enum EntryStatus {
  UnMarked
  OnTime
  Late
  LeftEarly
}

enum DayStatus {
  FullDay
  HalfDay
}

enum AttendanceType {
  Manual
  Automated
}

enum MessageType {
  INFO
  WARN
  ERROR
}

enum FeeType {
  MONTHLY
  YEARLY
  ADHOC
  LATE
  ARREAR
}

enum TransactionType {
  Debit
  Credit
}

enum TransactionSource {
  StudentFeePayment
  StaffSalaryPayment
  FamilyCreditAdded
  StudentFeePaymentUsingFamilyCredit
  NewLoanToEmployee
  LoanPaymentByEmployee
  SellProductsFromInventory
  BuyProductsIntoInventory
}

enum FeeStatus {
  Paid
  Unpaid
  Partial
  Cancelled
}

enum PaymentType {
  Cash
  Cheque
  Online
  Wallet
  Credit
}

model Months {
  id   Int    @id
  name String @db.VarChar(255)
}

model Sessions {
  id              Int               @id @default(autoincrement())
  session         String            @db.VarChar(255)
  campusId        Int
  campus          Campus            @relation(fields: [campusId], references: [id])
  startMonth      Int
  startYear       Int
  endMonth        Int
  endYear         Int
  Institute       Institute[]
  AdmissionRecord AdmissionRecord[]
  TimeTable       TimeTable[]
  Holidays        Holidays[]
}

enum FileType {
  Word
  PDF
  Excel
  URL
  Audio
  Video
}

model Institute {
  id                  Int              @id @default(autoincrement())
  instituteName       String           @db.VarChar(255)
  instituteSignature  String           @db.VarChar(255)
  instituteCode       String?          @db.VarChar(255)
  address             String           @db.VarChar(255)
  phone               String           @db.VarChar(255)
  email               String           @db.VarChar(255)
  currency            String           @db.VarChar(255)
  sessionId           Int?
  session             Sessions?        @relation(fields: [sessionId], references: [id])
  feeDuesDays         Int?
  allowOnlineClass    Int              @default(0)
  jitsiAppID          String?          @db.VarChar(255)
  allowEmail          Int              @default(0)
  emailApiKey         String?          @db.VarChar(255)
  emailFromName       String?          @db.VarChar(255)
  emailFromId         String?          @db.VarChar(255)
  allowSMS            Int              @default(0)
  SMSApiKey           String?          @db.VarChar(255)
  themeColor          String?          @db.VarChar(255)
  logo                String           @db.VarChar(255)
  headerImage         String           @db.VarChar(255)
  schoolLeavingCertId Int              @default(1)
  characterCertId     Int              @default(4)
  dobCertId           Int              @default(6)
  created_by          Int
  updated_by          Int
  created_at          DateTime         @default(now()) @db.DateTime(6)
  updated_at          DateTime         @default(now()) @db.DateTime(6)
  Campus              Campus[]
  PaymentDetails      PaymentDetails[]
}

model Campus {
  id                          Int                           @id @default(autoincrement())
  campusName                  String                        @db.VarChar(255)
  campusAddress               String                        @db.VarChar(255)
  campusPhone                 String                        @db.VarChar(255)
  active                      Int                           @default(1) @db.TinyInt
  instituteId                 Int
  institute                   Institute                     @relation(fields: [instituteId], references: [id])
  created_by                  Int
  updated_by                  Int
  created_at                  DateTime                      @default(now()) @db.DateTime(6)
  updated_at                  DateTime                      @default(now()) @db.DateTime(6)
  TransportRoutes             TransportRoutes[]
  Class                       Class[]
  Section                     Section[]
  User                        User[]
  AdmissionRecord             AdmissionRecord[]
  DefaultImageSetting         DefaultImageSetting[]
  OnlineClasses               OnlineClasses[]
  Subject                     Subject[]
  ListOfValues                ListOfValues[]
  UserPermission              UserPermission[]
  Permission                  Permission[]
  MenuCategoryPermissions     MenuCategoryPermissions[]
  MenuItemPermissions         MenuItemPermissions[]
  TimeTable                   TimeTable[]
  AdmissionRequestOrInquiries AdmissionRequestOrInquiries[]
  Holidays                    Holidays[]
  Attendance                  Attendance[]
  EmailTemplate               EmailTemplate[]
  SMSTemplate                 SMSTemplate[]
  EmailHistory                EmailHistory[]
  SMSHistory                  SMSHistory[]
  NoticeBoard                 NoticeBoard[]
  DailyHomework               DailyHomework[]
  FeePlan                     FeePlan[]
  FeePlanBreakup              FeePlanBreakup[]
  FamilyCredit                FamilyCredit[]
  StudentFees                 StudentFees[]
  MYAALInvoices               MYAALInvoices[]
  Transactions                Transactions[]
  SalaryPlan                  SalaryPlan[]
  SalaryPlanBreakup           SalaryPlanBreakup[]
  EmployeeSalary              EmployeeSalary[]
  PaySlip                     PaySlip[]
  SalaryPaymentRecord         SalaryPaymentRecord[]
  EmployeeLoan                EmployeeLoan[]
  LoanDetails                 LoanDetails[]
  StudyMaterial               StudyMaterial[]
  AccessPermission            AccessPermission[]
  Theme                       Theme[]
  StockCategory               StockCategory[]
  StockProduct                StockProduct[]
  TeachersInSection           TeachersInSection[]
  Notifications               Notifications[]
  SellProductDetails          SellProductDetails[]
  SellDetails                 SellDetails[]
  Sessions                    Sessions[]
  Leaves                      Leaves[]
  LeaveDates                  LeaveDates[]
  StudentRatings              StudentRatings[]
}

model DefaultImageSetting {
  id         Int      @id @default(autoincrement())
  campusId   Int
  campus     Campus   @relation(fields: [campusId], references: [id])
  front      String?  @db.VarChar(255)
  back       String?  @db.VarChar(255)
  type       String?  @db.VarChar(255)
  forUser    String?  @db.VarChar(255)
  created_by Int
  updated_by Int
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @db.DateTime(6)
}

model PaymentDetails {
  id                Int       @id @default(autoincrement())
  instituteId       Int
  institute         Institute @relation(fields: [instituteId], references: [id])
  bankAccountName   String    @db.VarChar(255)
  bankAccountBranch String    @db.VarChar(255)
  bankAccountIFSC   String    @db.VarChar(255)
  bankAccountNumber String    @db.VarChar(255)
  created_by        Int
  updated_by        Int
  created_at        DateTime  @default(now()) @db.DateTime(6)
  updated_at        DateTime  @default(now()) @db.DateTime(6)
}

model TransportRoutes {
  id           Int      @id @default(autoincrement())
  routeName    String   @db.VarChar(255)
  routeDesc    String   @db.VarChar(255)
  startAddress String   @db.VarChar(255)
  endAddress   String   @db.VarChar(255)
  active       Int      @default(1) @db.TinyInt
  campusId     Int
  campus       Campus   @relation(fields: [campusId], references: [id])
  created_by   Int
  updated_by   Int
  created_at   DateTime @default(now()) @db.DateTime(6)
  updated_at   DateTime @default(now()) @db.DateTime(6)

  User User[]
}

model Class {
  id                          Int                           @id @default(autoincrement())
  className                   String                        @db.VarChar(255)
  numericName                 String                        @db.VarChar(255)
  teacherId                   Int?
  campusId                    Int
  campus                      Campus                        @relation(fields: [campusId], references: [id])
  active                      Int                           @default(1) @db.TinyInt
  created_by                  Int
  updated_by                  Int
  created_at                  DateTime                      @default(now()) @db.DateTime(6)
  updated_at                  DateTime                      @default(now()) @db.DateTime(6)
  Section                     Section[]
  User                        User[]
  OnlineClasses               OnlineClasses[]
  TimeTable                   TimeTable[]
  AdmissionRequestOrInquiries AdmissionRequestOrInquiries[]
  Holidays                    Holidays[]
  DailyHomework               DailyHomework[]
  Attendance                  Attendance[]
  StudentFees                 StudentFees[]
  MYAALInvoices               MYAALInvoices[]
  Transactions                Transactions[]
  StudyMaterial               StudyMaterial[]
  StudentRatings              StudentRatings[]
}

model Section {
  id                Int                 @id @default(autoincrement())
  sectionName       String              @db.VarChar(255)
  classId           Int
  class             Class               @relation(fields: [classId], references: [id])
  campusId          Int
  campus            Campus              @relation(fields: [campusId], references: [id])
  active            Int                 @default(1) @db.TinyInt
  created_by        Int
  updated_by        Int
  created_at        DateTime            @default(now()) @db.DateTime(6)
  updated_at        DateTime            @default(now()) @db.DateTime(6)
  User              User[]
  OnlineClasses     OnlineClasses[]
  subjects          Subject[]
  TimeTable         TimeTable[]
  Holidays          Holidays[]
  DailyHomework     DailyHomework[]
  Attendance        Attendance[]
  StudentFees       StudentFees[]
  MYAALInvoices     MYAALInvoices[]
  Transactions      Transactions[]
  StudyMaterial     StudyMaterial[]
  TeachersInSection TeachersInSection[]
  StudentRatings    StudentRatings[]
}

model TeachersInSection {
  id        Int     @id @default(autoincrement())
  campusId  Int
  campus    Campus  @relation(fields: [campusId], references: [id])
  teacherId Int
  teacher   User    @relation(fields: [teacherId], references: [id])
  sectionId Int
  section   Section @relation(fields: [sectionId], references: [id])
}

model User {
  id                   Int                   @id @default(autoincrement())
  userType             UserType              @default(student)
  firstName            String                @db.VarChar(255)
  middleName           String?               @db.VarChar(255)
  lastName             String                @db.VarChar(255)
  displayName          String                @db.VarChar(255)
  gender               Gender                @default(Male)
  dateOfBirth          DateTime?             @db.Date
  placeOfBirth         String?               @db.VarChar(255)
  photo                String?               @db.VarChar(255)
  thumbnailUrl         String?               @db.VarChar(255)
  active               Int                   @default(1) @db.TinyInt
  leftMenuExpanded     Int                   @default(1) @db.TinyInt
  resetPasswordFlag    Int                   @default(1) @db.TinyInt
  resetPasswordCode    String?               @db.VarChar(255)
  campusId             Int
  campus               Campus?               @relation(fields: [campusId], references: [id])
  homeAddress          String?               @db.VarChar(500)
  password             String                @db.VarChar(255)
  idCardNumber         String                @unique @db.VarChar(255)
  rollNumber           Int?
  classId              Int?
  class                Class?                @relation(fields: [classId], references: [id])
  sectionId            Int?
  section              Section?              @relation(fields: [sectionId], references: [id])
  routeId              Int?
  route                TransportRoutes?      @relation(fields: [routeId], references: [id])
  previousSchool       String?               @db.VarChar(255)
  admissionDate        DateTime?             @db.Date
  email                String?               @db.VarChar(255)
  mobile               String?               @db.VarChar(255)
  whatsapp             String?               @db.VarChar(255)
  empId                String?               @db.VarChar(255)
  designation          String?               @db.VarChar(255)
  CNIC                 String?               @db.VarChar(255)
  qualification        String?               @db.VarChar(255)
  fatherHusbandName    String?               @db.VarChar(255)
  joiningDate          DateTime?             @db.Date
  maritalStatus        MaritalStatus?        @default(NA_MARITALSTATUS)
  salaryType           SalaryType?           @default(NA_SALTYPE)
  schoolIdCardNumber   String?               @db.VarChar(255)
  idProofPhoto         String?               @db.VarChar(255)
  religion             String?               @db.VarChar(255)
  citizenship          String?               @db.VarChar(255)
  parentType           ParentType?           @default(NA_PARENTTYPE)
  profession           String?               @db.VarChar(255)
  emergencyContact     String?               @db.VarChar(255)
  themeName            String                @default("LIGHT") @db.VarChar(255)
  isUserTheme          Int                   @default(0)
  created_by           Int
  updated_by           Int
  created_at           DateTime              @default(now()) @db.DateTime(6)
  updated_at           DateTime              @default(now()) @db.DateTime(6)
  userPermissions      UserPermission[]
  AdmissionRecord      AdmissionRecord[]
  parentsNames         String?               @db.VarChar(255)
  OnlineClasses        OnlineClasses?        @relation(fields: [onlineClassesId], references: [id])
  onlineClassesId      Int?
  subjects             Subject[]
  parent               ParentChildRelation[] @relation("parent")
  children             ParentChildRelation[] @relation("children")
  Attendance           Attendance[]
  FamilyCredit         FamilyCredit[]
  StudentFees          StudentFees[]
  MYAALInvoices        MYAALInvoices[]
  Transactions         Transactions[]
  EmployeeSalary       EmployeeSalary[]
  PaySlip              PaySlip[]
  EmployeeLoan         EmployeeLoan[]
  Theme                Theme[]
  TeachersInSection    TeachersInSection[]
  Notifications        Notifications[]       @relation(name: "UserNotification")
  NotificationsCreater Notifications[]       @relation(name: "UserCreated")
  SellDetails          SellDetails[]
  Leaves               Leaves[]
  StudentRatings       StudentRatings[]
}

model ParentChildRelation {
  parent     User @relation("children", fields: [parentId], references: [id])
  parentId   Int
  children   User @relation("parent", fields: [childrenId], references: [id])
  childrenId Int

  @@id([parentId, childrenId])
}

model AdmissionRecord {
  id                Int       @id @default(autoincrement())
  userId            Int?
  user              User?     @relation(fields: [userId], references: [id])
  campusId          Int
  campus            Campus    @relation(fields: [campusId], references: [id])
  admissionComments String?   @db.VarChar(255)
  rollNumber        String?   @db.VarChar(255)
  active            Int       @default(1) @db.TinyInt
  ongoingSessionId  Int?
  session           Sessions? @relation(fields: [ongoingSessionId], references: [id])
  created_by        Int
  updated_by        Int
  created_at        DateTime  @default(now()) @db.DateTime(6)
  updated_at        DateTime  @default(now()) @db.DateTime(6)
}

model UserPermission {
  id           Int        @id @default(autoincrement())
  userId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  active       Int        @default(1) @db.TinyInt
  campusId     Int?
  campus       Campus?    @relation(fields: [campusId], references: [id])
  created_by   Int
  updated_by   Int
  created_at   DateTime   @default(now()) @db.DateTime(6)
  updated_at   DateTime   @default(now()) @db.DateTime(6)

  User User @relation(fields: [userId], references: [id])
}

model Permission {
  id                      Int                       @id @default(autoincrement())
  permissionName          String                    @db.VarChar(255)
  permissionType          UserType                  @default(student)
  isReadonly              Int                       @default(1) @db.TinyInt
  isMobile                Int                       @default(1) @db.TinyInt
  active                  Int                       @default(1) @db.TinyInt
  campusId                Int?
  campus                  Campus?                   @relation(fields: [campusId], references: [id])
  dashboardUrl            String?                   @db.VarChar(255)
  created_by              Int
  updated_by              Int
  created_at              DateTime                  @default(now()) @db.DateTime(6)
  updated_at              DateTime                  @default(now()) @db.DateTime(6)
  UserPermission          UserPermission[]
  MenuCategoryPermissions MenuCategoryPermissions[]
  MenuItemPermissions     MenuItemPermissions[]
  AccessPermission        AccessPermission[]
}

model MenuCategoryPermissions {
  id             Int          @id @default(autoincrement())
  permissionId   Int
  permission     Permission   @relation(fields: [permissionId], references: [id])
  menuCategoryId Int
  menuCategory   MenuCategory @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  campusId       Int?
  campus         Campus?      @relation(fields: [campusId], references: [id])

  active     Int      @default(1) @db.TinyInt
  created_by Int
  updated_by Int
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @db.DateTime(6)
}

model MenuCategory {
  id                      Int                       @id
  label                   String                    @db.VarChar(255)
  route                   String?                   @db.VarChar(255)
  orderKey                Int
  active                  Int                       @default(1) @db.TinyInt
  created_by              Int
  updated_by              Int
  created_at              DateTime                  @default(now()) @db.DateTime(6)
  updated_at              DateTime                  @default(now()) @db.DateTime(6)
  menu_item               MenuItems[]
  MenuCategoryPermissions MenuCategoryPermissions[]
}

model MenuItemPermissions {
  id           Int        @id @default(autoincrement())
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  menuItemId   Int
  menuItem     MenuItems  @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  campusId     Int?
  campus       Campus?    @relation(fields: [campusId], references: [id])
  active       Int        @default(1) @db.TinyInt
  created_by   Int
  updated_by   Int
  created_at   DateTime   @default(now()) @db.DateTime(6)
  updated_at   DateTime   @default(now()) @db.DateTime(6)
}

model MenuItems {
  id                  Int                   @id
  label               String                @db.VarChar(255)
  route               String                @db.VarChar(255)
  orderKey            Int
  active              Int                   @default(1) @db.TinyInt
  created_by          Int
  updated_by          Int
  created_at          DateTime              @default(now()) @db.DateTime(6)
  updated_at          DateTime              @default(now()) @db.DateTime(6)
  category            MenuCategory          @relation(fields: [categoryId], references: [id])
  categoryId          Int
  MenuItemPermissions MenuItemPermissions[]
}

model OnlineClasses {
  id              Int      @id @default(autoincrement())
  classTopic      String   @db.VarChar(255)
  classId         Int
  class           Class    @relation(fields: [classId], references: [id])
  sectionId       Int
  section         Section  @relation(fields: [sectionId], references: [id])
  meetingDateTime String?  @db.VarChar(255)
  meetingRoomId   String?  @db.VarChar(255)
  campusId        Int
  campus          Campus   @relation(fields: [campusId], references: [id])
  isPast          Int      @default(1) @db.TinyInt
  active          Int      @default(1) @db.TinyInt
  created_by      Int
  updated_by      Int
  created_at      DateTime @default(now()) @db.DateTime(6)
  updated_at      DateTime @default(now()) @db.DateTime(6)
  User            User[]
}

model Subject {
  id            Int             @id @default(autoincrement())
  campusId      Int
  campus        Campus          @relation(fields: [campusId], references: [id])
  active        Int             @default(1) @db.TinyInt
  subjectName   String?         @db.VarChar(255)
  subjectCode   String?         @db.VarChar(255)
  subjectType   SubjectType?    @default(Theory)
  created_by    Int
  updated_by    Int
  created_at    DateTime        @default(now()) @db.DateTime(6)
  updated_at    DateTime        @default(now()) @db.DateTime(6)
  teachers      User[]
  sections      Section[]
  sectionId     Int?
  TimeTable     TimeTable[]
  StudyMaterial StudyMaterial[]
}

model Attendance {
  id               Int            @id @default(autoincrement())
  campusId         Int
  campus           Campus         @relation(fields: [campusId], references: [id])
  classId          Int?
  class            Class?         @relation(fields: [classId], references: [id])
  sectionId        Int?
  section          Section?       @relation(fields: [sectionId], references: [id])
  userId           Int?
  user             User?          @relation(fields: [userId], references: [id])
  userType         UserType       @default(student)
  attendanceType   AttendanceType @default(Manual)
  attendanceStatus AbsenseStatus  @default(UnMarked)
  entryStatus      EntryStatus    @default(UnMarked)
  dayStatus        DayStatus      @default(FullDay)
  attendanceDate   DateTime?      @db.Date
  recordStartTime  String?        @db.VarChar(255)
  recordEndTime    String?        @db.VarChar(255)
  notes            String?        @db.LongText
  created_by       Int
  created_at       DateTime       @default(now()) @db.DateTime(6)
}

model ListOfValues {
  id          Int      @id @default(autoincrement())
  groupName   String   @db.VarChar(255)
  uniqueKey   String   @unique @db.VarChar(255)
  shortName   String   @db.VarChar(255)
  longName    String   @db.VarChar(255)
  description String   @db.VarChar(255)
  campusId    Int
  campus      Campus   @relation(fields: [campusId], references: [id])
  active      Int      @default(1) @db.TinyInt
  created_by  Int
  updated_by  Int
  created_at  DateTime @default(now()) @db.DateTime(6)
  updated_at  DateTime @default(now()) @db.DateTime(6)
}

model TimeTable {
  id               Int       @id @default(autoincrement())
  classId          Int?
  class            Class?    @relation(fields: [classId], references: [id])
  sectionId        Int?
  section          Section?  @relation(fields: [sectionId], references: [id])
  year             String?
  campusId         Int
  campus           Campus    @relation(fields: [campusId], references: [id])
  ongoingSessionId Int?
  session          Sessions? @relation(fields: [ongoingSessionId], references: [id])
  subject          String?
  color            String    @default("#A5DD9B")
  bgcolor          String    @default("#A5DD9B")
  duration         String
  active           Int       @default(1) @db.TinyInt
  isRecurring      Int       @default(1) @db.TinyInt
  day              String?
  startTime        String?
  endTime          String?
  start            String?
  end              String?
  created_by       Int
  updated_by       Int
  created_at       DateTime  @default(now()) @db.DateTime(6)
  updated_at       DateTime  @default(now()) @db.DateTime(6)
  Subject          Subject?  @relation(fields: [subjectId], references: [id])
  subjectId        Int?
}

model Holidays {
  id               Int       @id @default(autoincrement())
  classId          Int?
  class            Class?    @relation(fields: [classId], references: [id])
  sectionId        Int?
  section          Section?  @relation(fields: [sectionId], references: [id])
  ongoingSessionId Int?
  session          Sessions? @relation(fields: [ongoingSessionId], references: [id])
  campusId         Int
  campus           Campus    @relation(fields: [campusId], references: [id])
  active           Int       @default(1) @db.TinyInt
  name             String?   @db.VarChar(255)
  holidayStart     String?   @db.VarChar(255)
  holidayEnd       String?   @db.VarChar(255)
  created_by       Int
  updated_by       Int
  created_at       DateTime  @default(now()) @db.DateTime(6)
  updated_at       DateTime  @default(now()) @db.DateTime(6)
}

model AdmissionRequestOrInquiries {
  id             Int      @id @default(autoincrement())
  isFromApp      Int      @default(0)
  isApproved     String   @default("No") @db.VarChar(255)
  firstName      String   @db.VarChar(255)
  middleName     String?  @db.VarChar(255)
  lastName       String   @db.VarChar(255)
  displayName    String   @db.VarChar(255)
  gender         Gender   @default(Male)
  dateOfBirth    DateTime @db.Date
  placeOfBirth   String?  @db.VarChar(255)
  campusId       Int
  campus         Campus?  @relation(fields: [campusId], references: [id])
  location       String?  @db.VarChar(500)
  previousSchool String?  @db.VarChar(255)
  admissionDate  DateTime @db.Date
  email          String?  @db.VarChar(255)
  mobile         String?  @db.VarChar(255)
  IDorCNIC       String?  @db.VarChar(255)
  parentFullName String?  @db.VarChar(255)
  comments       String?  @db.VarChar(255)
  classId        Int?
  class          Class?   @relation(fields: [classId], references: [id])
  active         Int      @default(1) @db.TinyInt
  created_by     Int
  updated_by     Int
  created_at     DateTime @default(now()) @db.DateTime(6)
  updated_at     DateTime @default(now()) @db.DateTime(6)
}

model ReportThemes {
  id         Int      @id @default(autoincrement())
  groupName  String   @db.VarChar(255)
  uniqueKey  String   @unique @db.VarChar(255)
  image      String   @db.VarChar(255)
  active     Int      @default(1) @db.TinyInt
  created_by Int
  updated_by Int
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @db.DateTime(6)
}

model EmailTemplate {
  id           Int            @id @default(autoincrement())
  campusId     Int
  campus       Campus         @relation(fields: [campusId], references: [id])
  active       Int            @default(1) @db.TinyInt
  name         String?        @db.VarChar(255)
  subject      String?        @db.VarChar(255)
  body         String?        @db.LongText
  keywords     String?        @db.VarChar(500)
  isEditable   Int            @default(1) @db.TinyInt
  created_by   Int
  updated_by   Int
  created_at   DateTime       @default(now()) @db.DateTime(6)
  updated_at   DateTime       @default(now()) @db.DateTime(6)
  EmailHistory EmailHistory[]
}

model EmailHistory {
  id              Int           @id @default(autoincrement())
  campusId        Int
  campus          Campus        @relation(fields: [campusId], references: [id])
  active          Int           @default(1) @db.TinyInt
  emailTemplateId Int
  emailTemplate   EmailTemplate @relation(fields: [emailTemplateId], references: [id])
  name            String?       @db.VarChar(255)
  tos             String?       @db.VarChar(255)
  subject         String?       @db.VarChar(255)
  body            String?       @db.LongText
  created_by      Int
  created_at      DateTime      @default(now()) @db.DateTime(6)
}

model SMSTemplate {
  id         Int          @id @default(autoincrement())
  campusId   Int
  campus     Campus       @relation(fields: [campusId], references: [id])
  active     Int          @default(1) @db.TinyInt
  name       String?      @db.VarChar(255)
  body       String?      @db.VarChar(255)
  keywords   String?      @db.VarChar(500)
  created_by Int
  updated_by Int
  created_at DateTime     @default(now()) @db.DateTime(6)
  updated_at DateTime     @default(now()) @db.DateTime(6)
  SMSHistory SMSHistory[]
}

model SMSHistory {
  id            Int         @id @default(autoincrement())
  campusId      Int
  campus        Campus      @relation(fields: [campusId], references: [id])
  active        Int         @default(1) @db.TinyInt
  smsTemplateId Int
  smsTemplate   SMSTemplate @relation(fields: [smsTemplateId], references: [id])
  name          String?     @db.VarChar(255)
  tos           String?     @db.VarChar(255)
  body          String?     @db.LongText
  created_by    Int
  created_at    DateTime    @default(now()) @db.DateTime(6)
}

model Notifications {
  id            Int      @id @default(autoincrement())
  campusId      Int
  campus        Campus   @relation(fields: [campusId], references: [id])
  userId        Int
  user          User     @relation(name: "UserNotification", fields: [userId], references: [id])
  markedRead    Int      @default(0) @db.TinyInt
  message       String?  @db.LongText
  created_by    Int
  createdbyuser User     @relation(name: "UserCreated", fields: [created_by], references: [id])
  created_at    DateTime @default(now()) @db.DateTime(6)
}

model NoticeBoard {
  id          Int         @id @default(autoincrement())
  campusId    Int
  campus      Campus      @relation(fields: [campusId], references: [id])
  active      Int         @default(1) @db.TinyInt
  name        String?     @db.VarChar(255)
  message     String?     @db.LongText
  messageType MessageType @default(INFO)
  created_by  Int
  created_at  DateTime    @default(now()) @db.DateTime(6)
}

model DailyHomework {
  id           Int       @id @default(autoincrement())
  campusId     Int
  campus       Campus    @relation(fields: [campusId], references: [id])
  classId      Int?
  class        Class?    @relation(fields: [classId], references: [id])
  sectionId    Int?
  section      Section?  @relation(fields: [sectionId], references: [id])
  active       Int       @default(1) @db.TinyInt
  homeworkDate DateTime? @db.Date
  homeworkData String?   @db.LongText
  created_by   Int
  updated_by   Int
  created_at   DateTime  @default(now()) @db.DateTime(6)
  updated_at   DateTime  @default(now()) @db.DateTime(6)
}

model FeePlan {
  id             Int              @id @default(autoincrement())
  campusId       Int
  campus         Campus           @relation(fields: [campusId], references: [id])
  active         Int              @default(1) @db.TinyInt
  name           String?          @db.VarChar(255)
  monthlyAmt     Float            @default(0.0)
  yearlyAmt      Float            @default(0.0)
  created_by     Int
  updated_by     Int
  created_at     DateTime         @default(now()) @db.DateTime(6)
  updated_at     DateTime         @default(now()) @db.DateTime(6)
  FeePlanBreakup FeePlanBreakup[]
  StudentFees    StudentFees[]
}

model FeePlanBreakup {
  id          Int     @id @default(autoincrement())
  feePlanId   Int
  feePlan     FeePlan @relation(fields: [feePlanId], references: [id])
  campusId    Int
  campus      Campus  @relation(fields: [campusId], references: [id])
  isYearly    Int     @default(0) @db.TinyInt
  breakupname String? @db.VarChar(255)
  amount      Float   @default(0.0)
}

model StudentFees {
  id         Int      @id @default(autoincrement())
  campusId   Int
  campus     Campus   @relation(fields: [campusId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  feePlanId  Int
  feePlan    FeePlan  @relation(fields: [feePlanId], references: [id])
  classId    Int?
  class      Class?   @relation(fields: [classId], references: [id])
  sectionId  Int?
  section    Section? @relation(fields: [sectionId], references: [id])
  active     Int      @default(1) @db.TinyInt
  created_by Int
  updated_by Int
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @default(now()) @db.DateTime(6)
}

model MYAALInvoices {
  id            Int         @id @default(autoincrement())
  invoiceNumber String      @unique @db.VarChar(255)
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  campusId      Int
  campus        Campus      @relation(fields: [campusId], references: [id])
  classId       Int?
  class         Class?      @relation(fields: [classId], references: [id])
  sectionId     Int?
  section       Section?    @relation(fields: [sectionId], references: [id])
  feeType       FeeType     @default(MONTHLY)
  feeStatus     FeeStatus   @default(Unpaid)
  paymentType   PaymentType @default(Cash)
  year          Int
  month         Int
  dueDate       DateTime    @default(now()) @db.DateTime(6)
  amount        Float       @default(0.0)
  paidAmount    Float       @default(0.0)
  paidOn        DateTime?   @db.DateTime(6)
  created_by    Int
  updated_by    Int
  created_at    DateTime    @default(now()) @db.DateTime(6)
  updated_at    DateTime    @default(now()) @db.DateTime(6)
}

model FamilyCredit {
  id              Int            @id @default(autoincrement())
  userId          Int
  user            User           @relation(fields: [userId], references: [id])
  campusId        Int
  campus          Campus         @relation(fields: [campusId], references: [id])
  availableCredit Float          @default(0.0)
  transactions    Transactions[]
  created_by      Int
  updated_by      Int
  created_at      DateTime       @default(now()) @db.DateTime(6)
  updated_at      DateTime       @default(now()) @db.DateTime(6)
}

model Transactions {
  id              Int               @id @default(autoincrement())
  campusId        Int
  campus          Campus            @relation(fields: [campusId], references: [id])
  transactionType TransactionType   @default(Credit)
  source          TransactionSource @default(StudentFeePayment)
  invoiceNumber   String?           @db.VarChar(255)
  userId          Int?
  user            User?             @relation(fields: [userId], references: [id])
  classId         Int?
  class           Class?            @relation(fields: [classId], references: [id])
  sectionId       Int?
  section         Section?          @relation(fields: [sectionId], references: [id])
  amount          Float             @default(0.0)
  paymentType     PaymentType       @default(Cash)
  created_by      Int
  created_at      DateTime          @default(now()) @db.DateTime(6)
  FamilyCredit    FamilyCredit?     @relation(fields: [familyCreditId], references: [id])
  familyCreditId  Int?
  EmployeeLoan    EmployeeLoan?     @relation(fields: [employeeLoanId], references: [id])
  employeeLoanId  Int?
  SellDetails     SellDetails?      @relation(fields: [sellDetailsId], references: [id])
  sellDetailsId   Int?
}

model EmployeeLoan {
  id            Int            @id @default(autoincrement())
  loanAccountId String         @db.VarChar(255)
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  campusId      Int
  campus        Campus         @relation(fields: [campusId], references: [id])
  status        Int            @default(1) @db.TinyInt
  totalLoan     Float          @default(0.0)
  monthlyAmt    Float          @default(0.0)
  remainingSum  Float          @default(0.0)
  transactions  Transactions[]
  created_by    Int
  updated_by    Int
  created_at    DateTime       @default(now()) @db.DateTime(6)
  updated_at    DateTime       @default(now()) @db.DateTime(6)
  LoanDetails   LoanDetails[]
}

model LoanDetails {
  id             Int          @id @default(autoincrement())
  LoanId         String       @db.VarChar(255)
  employeeLoanId Int
  employeeLoan   EmployeeLoan @relation(fields: [employeeLoanId], references: [id])
  campusId       Int
  campus         Campus       @relation(fields: [campusId], references: [id])
  status         Int          @default(1) @db.TinyInt
  amount         Float        @default(0.0)
  created_by     Int
  updated_by     Int
  created_at     DateTime     @default(now()) @db.DateTime(6)
  updated_at     DateTime     @default(now()) @db.DateTime(6)
}

model SalaryPlan {
  id                 Int                 @id @default(autoincrement())
  campusId           Int
  campus             Campus              @relation(fields: [campusId], references: [id])
  active             Int                 @default(1) @db.TinyInt
  name               String?             @db.VarChar(255)
  monthlySalary      Float               @default(0.0)
  monthlydeductables Float               @default(0.0)
  yearlySalary       Float               @default(0.0)
  created_by         Int
  updated_by         Int
  created_at         DateTime            @default(now()) @db.DateTime(6)
  updated_at         DateTime            @default(now()) @db.DateTime(6)
  SalaryPlanBreakup  SalaryPlanBreakup[]
  EmployeeSalary     EmployeeSalary[]
}

model SalaryPlanBreakup {
  id           Int        @id @default(autoincrement())
  salaryPlanId Int
  salaryPlan   SalaryPlan @relation(fields: [salaryPlanId], references: [id])
  campusId     Int
  campus       Campus     @relation(fields: [campusId], references: [id])
  breakupname  String?    @db.VarChar(255)
  type         String     @default("MONTHLY") @db.VarChar(255)
  amount       Float      @default(0.0)
}

model EmployeeSalary {
  id           Int        @id @default(autoincrement())
  campusId     Int
  campus       Campus     @relation(fields: [campusId], references: [id])
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  salaryPlanId Int
  salaryPlan   SalaryPlan @relation(fields: [salaryPlanId], references: [id])
  active       Int        @default(1) @db.TinyInt
  created_by   Int
  updated_by   Int
  created_at   DateTime   @default(now()) @db.DateTime(6)
  updated_at   DateTime   @default(now()) @db.DateTime(6)
}

model PaySlip {
  id                  Int                   @id @default(autoincrement())
  invoiceNumber       String                @unique @db.VarChar(255)
  userId              Int
  user                User                  @relation(fields: [userId], references: [id])
  campusId            Int
  campus              Campus                @relation(fields: [campusId], references: [id])
  slipType            FeeType               @default(MONTHLY)
  slipStatus          FeeStatus             @default(Unpaid)
  year                Int
  month               Int
  amount              Float                 @default(0.0)
  created_by          Int
  updated_by          Int
  created_at          DateTime              @default(now()) @db.DateTime(6)
  updated_at          DateTime              @default(now()) @db.DateTime(6)
  SalaryPaymentRecord SalaryPaymentRecord[]
}

model SalaryPaymentRecord {
  id            Int         @id @default(autoincrement())
  invoiceNumber String      @unique @db.VarChar(255)
  paySlipId     Int
  paySlip       PaySlip     @relation(fields: [paySlipId], references: [id])
  campusId      Int
  campus        Campus      @relation(fields: [campusId], references: [id])
  paymentType   PaymentType @default(Cash)
  paidAmount    Float       @default(0.0)
  paidOn        DateTime?   @db.DateTime(6)
  created_by    Int
  updated_by    Int
  created_at    DateTime    @default(now()) @db.DateTime(6)
  updated_at    DateTime    @default(now()) @db.DateTime(6)
}

model StudyMaterial {
  id          Int      @id @default(autoincrement())
  campusId    Int
  campus      Campus   @relation(fields: [campusId], references: [id])
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
  sectionId   Int?
  section     Section? @relation(fields: [sectionId], references: [id])
  subjectId   Int?
  subject     Subject? @relation(fields: [subjectId], references: [id])
  fileType    FileType @default(Video)
  active      Int      @default(1) @db.TinyInt
  title       String?  @db.VarChar(255)
  description String?  @db.LongText
  url         String?  @db.VarChar(255)
  created_by  Int
  updated_by  Int
  created_at  DateTime @default(now()) @db.DateTime(6)
  updated_at  DateTime @default(now()) @db.DateTime(6)
}

model Access {
  id               Int                @id @default(autoincrement())
  accessName       String             @db.VarChar(255)
  description      String             @db.LongText
  AccessPermission AccessPermission[]
}

model AccessPermission {
  id           Int         @id @default(autoincrement())
  accessId     Int?
  access       Access?     @relation(fields: [accessId], references: [id])
  campusId     Int
  campus       Campus      @relation(fields: [campusId], references: [id])
  permissionId Int?
  permission   Permission? @relation(fields: [permissionId], references: [id])
  created_by   Int
  updated_by   Int
  created_at   DateTime    @default(now()) @db.DateTime(6)
  updated_at   DateTime    @default(now()) @db.DateTime(6)
}

model Theme {
  id                    Int      @id @default(autoincrement())
  campusId              Int
  campus                Campus   @relation(fields: [campusId], references: [id])
  userId                Int?
  user                  User?    @relation(fields: [userId], references: [id])
  active                Int      @default(1) @db.TinyInt
  themeName             String   @db.VarChar(255)
  scheme                String   @db.VarChar(255)
  schemeColor           String   @db.VarChar(255)
  fontFamily            String   @db.VarChar(255)
  fontSize              Int?
  primaryColor          String   @db.VarChar(255)
  actionGreenButton     String   @db.VarChar(255)
  secondaryOrangeButton String   @db.VarChar(255)
  blue                  String   @db.VarChar(255)
  red                   String   @db.VarChar(255)
  orange                String   @db.VarChar(255)
  yellow                String   @db.VarChar(255)
  green                 String   @db.VarChar(255)
  backg                 String   @db.VarChar(255)
  foreg                 String   @db.VarChar(255)
  header                String   @db.VarChar(255)
  leftmenu              String   @db.VarChar(255)
  white                 String   @db.VarChar(255)
  black                 String   @db.VarChar(255)
  defaultRadius         Int      @default(5)
  created_by            Int
  updated_by            Int
  created_at            DateTime @default(now()) @db.DateTime(6)
  updated_at            DateTime @default(now()) @db.DateTime(6)
}

model StockCategory {
  id           Int            @id @default(autoincrement())
  campusId     Int
  campus       Campus         @relation(fields: [campusId], references: [id])
  active       Int            @default(1) @db.TinyInt
  categoryName String         @db.VarChar(255)
  description  String         @db.VarChar(255)
  created_by   Int
  updated_by   Int
  created_at   DateTime       @default(now()) @db.DateTime(6)
  updated_at   DateTime       @default(now()) @db.DateTime(6)
  StockProduct StockProduct[]
}

model StockProduct {
  id                 Int                  @id @default(autoincrement())
  campusId           Int
  campus             Campus               @relation(fields: [campusId], references: [id])
  active             Int                  @default(1) @db.TinyInt
  categoryId         Int
  category           StockCategory        @relation(fields: [categoryId], references: [id])
  appUniqueCode      String               @db.VarChar(255)
  productCode        String               @db.VarChar(255)
  productName        String               @db.VarChar(255)
  purchasePrice      Float                @default(0.0)
  sellPrice          Float                @default(0.0)
  stock              Int                  @default(0)
  created_by         Int
  updated_by         Int
  created_at         DateTime             @default(now()) @db.DateTime(6)
  updated_at         DateTime             @default(now()) @db.DateTime(6)
  SellProductDetails SellProductDetails[]
}

model SellProductDetails {
  id             Int          @id @default(autoincrement())
  campusId       Int
  campus         Campus       @relation(fields: [campusId], references: [id])
  active         Int          @default(1) @db.TinyInt
  productId      Int
  product        StockProduct @relation(fields: [productId], references: [id])
  sellPrice      Float        @default(0.0)
  quantity       Int
  totalSellPrice Float        @default(0.0)
  created_by     Int
  updated_by     Int
  created_at     DateTime     @default(now()) @db.DateTime(6)
  updated_at     DateTime     @default(now()) @db.DateTime(6)
  SellDetails    SellDetails? @relation(fields: [sellDetailsId], references: [id])
  sellDetailsId  Int?
}

model SellDetails {
  id                Int                  @id @default(autoincrement())
  campusId          Int
  campus            Campus               @relation(fields: [campusId], references: [id])
  active            Int                  @default(1) @db.TinyInt
  invoiceNumber     String               @unique @db.VarChar(255)
  soldToId          Int?
  soldTo            User?                @relation(fields: [soldToId], references: [id])
  products          SellProductDetails[]
  totalQuantity     Int
  combinedSellPrice Float                @default(0.0)
  transactions      Transactions[]
  created_by        Int
  updated_by        Int
  created_at        DateTime             @default(now()) @db.DateTime(6)
  updated_at        DateTime             @default(now()) @db.DateTime(6)
}

model Leaves {
  id                  Int          @id @default(autoincrement())
  campusId            Int
  campus              Campus       @relation(fields: [campusId], references: [id])
  userId              Int?
  user                User?        @relation(fields: [userId], references: [id])
  userType            UserType     @default(student)
  isApproved          Int          @default(0) @db.TinyInt
  reason              String?      @db.VarChar(255)
  rejectApproveReason String?      @db.VarChar(255)
  created_by          Int
  updated_by          Int
  created_at          DateTime     @default(now()) @db.DateTime(6)
  updated_at          DateTime     @default(now()) @db.DateTime(6)
  LeaveDates          LeaveDates[]
}

model LeaveDates {
  id       Int     @id @default(autoincrement())
  leaveId  Int
  leave    Leaves  @relation(fields: [leaveId], references: [id])
  campusId Int
  campus   Campus  @relation(fields: [campusId], references: [id])
  date     String? @db.VarChar(255)
}

model StudentRatings {
  id               Int      @id @default(autoincrement())
  campusId         Int
  campus           Campus   @relation(fields: [campusId], references: [id])
  userId           Int
  classId          Int?
  class            Class?   @relation(fields: [classId], references: [id])
  sectionId        Int?
  section          Section? @relation(fields: [sectionId], references: [id])
  ratingFrom       Int
  ratingFromUser   User     @relation(fields: [ratingFrom], references: [id])
  rating           Float    @default(0.0)
  comments         String?  @db.LongText
  previousRating   Float    @default(0.0)
  previousComments String?  @db.LongText
  created_by       Int
  updated_by       Int
  created_at       DateTime @default(now()) @db.DateTime(6)
  updated_at       DateTime @default(now()) @db.DateTime(6)
}
